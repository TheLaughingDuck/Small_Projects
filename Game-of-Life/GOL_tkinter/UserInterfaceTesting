import time

#For running (Will remove later when finished function is returned to main program file)
import Field_operator
import Field_explorer ##
import Windmodule
import sys


def U_Interface_V3():
    '''
    Intended to be an even more updated version of the original UI function.

    Current BUGS:
    The built-in forced exits will not work immediately, but will instead send the user
    onwards down to the next setting (when doing manual settings). This means the user
    will AT MOST have to press the ENTER key 7 times before the program exits. 
    '''
    
    ## Time Keeping for entire program
    global start_time
    start_time = time.time()

    ## UI Keeping track of stuff
    trials = 3 #User has 3 trials for each input-step
    completed = False
    consecutive_inputs = 0

    ## START of UI
    print("Program Initiating.")
    print("Please follow the simple setup procedure below :)")

    print('-----')
    print('Choose settings: "default" or "manual". (Recommended: "default").')
    while trials != 0 and completed == False:
        setup = input(">>")
        if(setup == "default" or setup == "def" or setup == ""):
            print("-----")
            print('Default settings selected.')
            Width = 600
            Height = 600
            length = 30
            Trimming = False

            completed = True #Exit outer while loop
        elif(setup == "manual" or setup == "man"):
            print("-----")
            print("Manual settings selected.")
            
            ## Width and Height
            trials = 3
            while trials != 0 and completed == False:
                print('-----')
                print('Please Input Width and Height. (Recommended: 600)')
                try:
                    Width = input(">>")
                    Height = Width

                    # Exit program
                    if(Width == ""):
                        consecutive_inputs += 1
                        if(consecutive_inputs >= 3):
                            print('-----')
                            print('Forced program exit')
                            print("(3 consecutive empty inputs)")
                            sys.exit("(3 consecutive empty inputs)")
                    else:
                        consecutive_inputs = 0

                        Width = int(Width)
                        Height = Width
                    
                    # Check Width input
                    if(Width < 0):
                        raise Exception()
                    
                    completed = True
                except:
                    print("An input-error occurred. Please try again.")
                    trials -= 1
            
            if(trials == 0):
                Width = 600
                Height = 600
                print("Number of trials (3) exceeded. \nDefault width and height (600) selected.")
            

            ## Square length
            trials = 3
            completed = False
            while trials != 0 and completed == False:
                print('-----')
                print('Input number of squares per side. (Recommended: 30).')
                try:
                    length = input(">>")

                    # Exit program
                    if(length == ""):
                        consecutive_inputs += 1
                        if(consecutive_inputs >= 3):
                            print('-----')
                            print('Forced program exit')
                            print("(3 consecutive empty inputs)")
                            sys.exit("(3 consecutive empty inputs)")
                    else:
                        consecutive_inputs = 0

                        length = int(length)
                    
                    # Check length input
                    if(length < 0):
                        raise Exception()
                    
                    completed = True
                except:
                    print("An input-error occurred. Please try again.")
                    trials -= 1
            
            if(trials == 0):
                length = 30
                print("Number of trials (3) exceeded. \nDefault number of squares (30) selected.")
            

            ## Trimming
            trials = 3
            completed = False
            while trials != 0 and completed == False:
                print('-----')
                print('Input trimming setting: "yes" or "no". (Recommended: "no")')
                Trimming = input(">>")

                # Exit program
                if(Trimming == ""):
                    consecutive_inputs += 1
                    if(consecutive_inputs >= 3):
                        print('-----')
                        print('Forced program exit')
                        print("(3 consecutive empty inputs)")
                        sys.exit("(3 consecutive empty inputs)")
                else:
                    consecutive_inputs = 0
                
                # Check Trimming input
                if(Trimming == "yes" or Trimming == "Trim"):
                    Trimming = True
                    completed = True
                elif(Trimming == "no" or Trimming == "notrim"):
                    Trimming == False
                    completed = True
                else:
                    print("An input-error occurred. Please try again.")
                    trials -= 1
            
            if(trials == 0):
                Trimming = False
                print('Number of trials (3) exceeded. \nDefault trimming setting ("no") filled in.')


            completed = True #Exit outer while loop
        else:
            print("An input-error occurred. Please try again.")
            trials -= 1
    
    if(trials == 0):
        print("Number of trials (3) exceeded. \nDefault settings selected.")
        

    print('-----')
    print("Setup completed!")
    ## END of UI: Perform various outputs
    main_sheet = Field_operator.Create_random_field(length)
    Windcan = Windmodule.Windclass(Width, Height, "Simply: life")
    return main_sheet, Windcan, Trimming



U_Interface_V3()

## DESIRED FEATURES

# Enter the desired information #Done

# Exit the program if three consecutive inputs have been empty. #Done (With small bug, see func desc.)



### DEPRECATED OLD UI FUNCTIONS



def U_Interface_V2():
    # DEPRECATED FUNCTION
    print("THIS FUNCTIONS IS DEPRECATED!")
    print("DO NOT USE THIS FUNCTION")

    "A more updated User Interface function than the original one."
    global start_time
    start_time = time.time()

    print('Initiating program...')
    print('...')

    print('Setup: Please choose either \"standard\" or \"manual\" by typing your choice (Recommended: "standard").')
    trials = 1
    while trials <= 3:
        try:
            setup = input(">>")
            if(setup == 'standard' or setup == ''):
                trials = 4
                print("Standard settings selected.")
                Width = 600
                Height = 600
                length = 30
                Trimming = False
            elif(setup == "manual"):
                trials = 1
                while trials <= 3:
                    print("Please input the desired width and height of the canvas (same value) (Recommended: 600).")
                    try:
                        Width = int(input('>>'))
                        Height = Width

                        trials = 4
                    except:
                        print("An error occurred while inputing width and height.")
                        print("Please try again (Recommended: 600).")
                        trials += 1
                
                trials = 1
                while trials <= 3:
                    print('Please specify the number of squares on one side (Recommended: 30)')
                    try:
                        length = int(input('>>'))
                        trials = 4
                    except:
                        print('An error occurred while inputing the number of squares per side')
                        print('Please try again (Recommended: 30).')
                        trials += 1
                
                trials = 1
                while trials <= 3:
                    print('Please specify if "trimming" should be available ("yes" or "no") (Recommended: "no")')
                    
                    try:
                        Trimming = input('>>')
                        if(Trimming == "yes"):
                            Trimming == True
                        elif(Trimming == "no"):
                            Trimming = False
                        else:
                            raise Exception()
                        trials = 4
                    except:
                        print('An error occurred while inputing "trimming" setting')
                        print('Please try again (Recommended: "no")')
                        trials += 1
                
            else:
                raise Exception()
                    

        except:
            print('An error occurred while inputing, please try again.')
            trials += 1
    
    print("Setup completed")

    main_sheet = Field_operator.Create_random_field(length)
    Windcan = Windmodule.Windclass(Width, Height, "Simply: life")
    return main_sheet, Windcan, Trimming



#Method to let user manipulate settings of program
def U_Interface():
    # DEPRECATED FUNCTION
    print("THIS FUNCTIONS IS DEPRECATED!")
    print("DO NOT USE THIS FUNCTION")
    
    global start_time
    start_time = time.time()
    
    print('Initiating program...')
    print('...')
    
    print('Setup: Manual or standard?')
    setup = input('>>')
    if (setup == 'standard' or setup == ''):
        Width = 600
        Height = 600
        length = 30
        Trimming = False
        
    elif(setup == 'Manual'):
        print('Width and Height of canvas?')
        Width = int(input('>>'))
        Height = Width
        
        print('Size of field? How many squares on one side?')
        length = input('>>')
        
        print('Enable "trimming"?')
        Trimming = input('>>')
    else:
        print('-----------------')
        print('Inmatningsfel, please try again.')
        print('-----------------')
        sys.exit()
        
    main_sheet = Field_operator.Create_random_field(length)
    Windcan = Windmodule.Windclass(Width, Height, "Simply: life")
    return main_sheet, Windcan, Trimming